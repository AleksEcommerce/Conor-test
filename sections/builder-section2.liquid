<div id="pendant-builder-container">
  {% if section.settings.pendant_image %}
      <img src="{{ section.settings.pendant_image | image_url: width: 1200 }}" alt="Pendant">
      <div class="b-charms_list m-two">
        <div class="b-charms_list--item m-first hidden">
          <img id="img-1" src="https://placehold.co/50x80" class="b-charms_list--item_img m-1" />
        </div>
        <div class="b-charms_list--item m-second hidden">
          <img id="img-2" src="https://placehold.co/50x70" class="b-charms_list--item_img m-2" />
        </div>
        <div class="b-charms_list--item m-third hidden">
          <img id="img-3" src="https://placehold.co/50x70" class="b-charms_list--item_img m-3" />
        </div>
        <div class="b-charms_list--item m-fourth hidden">
          <img id="img-4" src="https://placehold.co/50x70" class="b-charms_list--item_img m-4" />
        </div>
        {% comment %} {% for block in section.blocks %}
          {% if block.type == 'charm' and block.settings.charm_image %}
            <div class="b-charms_list--item">
              <img src="{{ block.settings.charm_image | image_url }}" alt="Charm" width="50" height="50">
            </div>
          {% endif %}
        {% endfor %} {% endcomment %}
      </div>
  {% endif %}
</div>

<div class="charm-list">
  {% for block in section.blocks %}
    {% if block.type == 'charm' and block.settings.charm_image %}
      <div class="charm-item">
        <img src="{{ block.settings.charm_image | image_url }}" alt="Charm" width="50" height="50">
        <input type="checkbox" class="charm-checkbox" data-charm="{{ block.settings.charm_image | image_url }}">
      </div>
    {% endif %}
  {% endfor %}
</div>

<style>
  .h-hidden {
    display: none;
  }

  #pendant-builder-container {
    width: 600px;
    margin: 0 auto;  
    overflow: hidden;
    position: relative;
  }

  #pendant-builder-container > img {
    {% comment %} position: absolute; {% endcomment %}
    width: 100%;
    margin-top: -50%;
    {% comment %} height: 100%; {% endcomment %}
    {% comment %} min-width: 600px; {% endcomment %}
    object-fit: cover;
    object-position: bottom;
  }

  @media screen and (max-width: 767px) {
    #pendant-builder-container {
      width: 350px;
    }

    #pendant-builder-container > img {
      width: 600px;
      margin-top: -70%;
    }
  }

  .charm-list {
    display: flex;
    justify-content: center;
    margin-top: 20px;
  }

  .b-charms_list {
    display: flex;
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    bottom: 40%;
    width: 200px;
    justify-content: center;
  }

  .b-charms_list--item {
    position: absolute;
    {% comment %} width: 50px; {% endcomment %}
     transition: all 0.3s ease;
  }

  .b-charms_list--item > img {
    {% comment %} position: absolute;
    left: 0;
    top: 0; {% endcomment %}
    display: block;
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .b-charms_list--item_img {

  }


  {% comment %} Animation {% endcomment %}
  .b-charms_list.m-1 .b-charms_list--item {
    transform: translateY(0) translateX(-50%) rotate(0);
    left: 50%;
  }
   
  .b-charms_list.m-2 .m-first {
    transform: translateY(-2px) rotate(5deg);
    left: 50%;
  }

  .b-charms_list.m-2 .m-second {
    transform: translateY(-2px) rotate(-5deg);
    left: 50%;
  }

  @keyframes sway-right {
    0% {
      transform: translateY(0) translateX(0) rotate(0);
    }
    30% {
      transform: translateY(-4px) translateX(60%) rotate(10deg); /* Уезжаем дальше */
    }
    60% {
      transform: translateY(-2px) translateX(52%) rotate(5deg); /* Начинаем возвращаться */
    }
    100% {
      transform: translateY(-2px) rotate(5deg); /* Конечная позиция */
      right: 50%;
    }
  }
  
  /* Анимация для элементов, которые уезжают налево */
  @keyframes sway-left {
    0% {
      transform: translateY(0) translateX(0) rotate(0);
    }
    30% {
      transform: translateY(-4px) translateX(-60%) rotate(-10deg); /* Уезжаем дальше */
    }
    60% {
      transform: translateY(-2px) translateX(-52%) rotate(-5deg); /* Начинаем возвращаться */
    }
    100% {
      transform: translateY(-2px) rotate(-5deg); /* Конечная позиция */
      left: 50%;
    }
  }
  
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const pendantContainer = document.getElementById('pendant-builder-container');
    const charmsList = document.querySelector('.b-charms_list');
    const maxCharms = 4;
    const charmItems = Array.from(document.querySelectorAll('.b-charms_list--item'));
    const charmImages = Array.from(document.querySelectorAll('.b-charms_list--item_img'));
    const checkboxes = Array.from(document.querySelectorAll('.charm-checkbox'));
    let counter = 0; // Счетчик для отслеживания заполненных слотов
  
    checkboxes.forEach((checkbox) => {
      const charmImageSrc = checkbox.getAttribute('data-charm');
  
      checkbox.addEventListener('change', function() {
        if (this.checked) {
          if (counter < maxCharms) {
            // Заполняем слоты последовательно с помощью счетчика
            charmImages[counter].src = charmImageSrc;
            const parentItem = charmImages[counter].closest('.b-charms_list--item');
            parentItem.classList.remove('hidden'); // Убираем класс hidden
            counter++; // Увеличиваем счетчик после заполнения слота
          }
        } else {
          // Находим и очищаем соответствующий слот при снятии чекбокса
          const imgToRemove = charmImages.find(img => img.getAttribute('src') === charmImageSrc);
          if (imgToRemove) {
            imgToRemove.src = ''; // Очищаем src, чтобы освободить слот
            const parentItem = imgToRemove.closest('.b-charms_list--item');
            parentItem.classList.add('hidden'); // Добавляем класс hidden
            counter--; // Уменьшаем счетчик при очистке слота
          }
        }
  
        // Обновить классы на .b-charms_list в зависимости от количества выбранных
        updateCharmListClass();
  
        // Проверка на достижение максимума
        checkMaxCharms();
      });
    });
  
    function updateCharmListClass() {
      const selectedCharms = checkboxes.filter(checkbox => checkbox.checked).length;
      charmsList.className = 'b-charms_list'; // Сбросить классы
  
      if (selectedCharms > 0 && selectedCharms <= maxCharms) {
        charmsList.classList.add(`m-${selectedCharms}`); // Добавляем класс в зависимости от количества активных чекбоксов
      }
    }
  
    function checkMaxCharms() {
      // Если достигнут максимум, отключаем все неактивные чекбоксы
      if (counter >= maxCharms) {
        checkboxes.forEach(checkbox => {
          if (!checkbox.checked) {
            checkbox.disabled = true; // Отключаем неактивные чекбоксы
          }
        });
      } else {
        // Если меньше максимума, убеждаемся, что чекбоксы активны
        checkboxes.forEach(checkbox => checkbox.disabled = false);
      }
    }
  });
  
  
</script>

{% schema %}
{
  "name": "Pendant Builder 2",
  "settings": [
    {
      "type": "image_picker",
      "id": "pendant_image",
      "label": "Pendant Image",
      "info": "Upload the base pendant image."
    }
  ],
  "blocks": [
    {
      "type": "charm",
      "name": "Charm",
      "settings": [
        {
          "type": "image_picker",
          "id": "charm_image",
          "label": "Charm Image"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Pendant Builder 2",
      "category": "Custom"
    }
  ]
}
{% endschema %}
