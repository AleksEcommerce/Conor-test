<div id="pendant-builder-container">
  {% if section.settings.pendant_image %}
      <img src="{{ section.settings.pendant_image | image_url: width: 1200 }}" alt="Pendant">
      <div class="b-charms_list"></div>
  {% endif %}
  <div id='b-notice' class="b-charms-notice hidden">Maximum number of pendants added</div>
</div>

<div class="charm-list">
  {% for block in section.blocks %}
    {% if block.type == 'charm' and block.settings.charm_image %}
      <div class="charm-item">
        <label for="charm-{{ forloop.index }}">
          <input type="checkbox" id="charm-{{ forloop.index }}" name="charm-{{ forloop.index }}"  class="charm-checkbox" data-charm="{{ block.settings.charm_image | image_url }}">
          <img src="{{ block.settings.charm_image | image_url }}" alt="Charm" width="50" height="50">
        </label>
      </div>
    {% endif %}
  {% endfor %}
</div>

<style>
  .h-hidden {
    display: none;
  }

  #pendant-builder-container {
    width: 600px;
    margin: 0 auto;  
    overflow: hidden;
    position: relative;
  }

  #pendant-builder-container > img {
    {% comment %} position: absolute; {% endcomment %}
    display: block;
    width: 100%;
    margin-top: -50%;
    {% comment %} height: 100%; {% endcomment %}
    {% comment %} min-width: 600px; {% endcomment %}
    object-fit: cover;
    object-position: bottom;
  }

  @media screen and (max-width: 767px) {
    #pendant-builder-container {
      width: 350px;
    }

    #pendant-builder-container > img {
      width: 600px;
      margin-top: -70%;
    }
  }

  .charm-list {
    display: flex;
    justify-content: center;
    padding-top: 30px;
    gap: 10px;
  }

  .charm-item input[type='checkbox'] {
    visibility: hidden;
    width: 0;
    height: 0;
    position: absolute;
  }

  .charm-item input[type='checkbox']:checked + img {
    pointer-events: none;
    opacity: 0.5;
    transform: translateY(-10px);
  }

  .charm-item label {
    display: block;
    position: relative;
    cursor: pointer;
    width: 120px;
    height: 120px;
  }

  .charm-item {
    
  }

  .b-charms-notice {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    bottom: 10px;
    background-color: yellow;
    color: black;
    padding: 5px 10px;
    border-radius: 5px;
    transition: all 0.3s ease;
    text-align: center;
  }

  .charm-item img {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    cursor: pointer;
    transition: all 0.3s ease;
    object-fit: contain;
  }

  .b-charms_list {
    display: flex;
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    bottom: 40%;
    width: 200px;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .b-charms_list--item {
    position: absolute;
    {% comment %} width: 50px; {% endcomment %}
    width: 25%;
    transition: all 0.3s ease;
    {% comment %} position: relative; {% endcomment %}
    opacity: 0;
    visibility: hidden;
  }

  .b-charms_list--item.m-showed {
    opacity: 1;
    visibility: visible;
  }

  .b-charms_list--item.m-showed > img {
    transform: translateX(-50%) translateY(0);
  }

  .b-charms_list--item > img {
    position: absolute;
    left: 50%;
    transform: translateX(-50%) translateY(10px);
    top: 0;
    display: block;
    object-fit: contain;
    transition: all 0.3s ease;
    max-width: 150%;
  }

  .b-charms_list--item {
  }

  .b-charms_list--item_img {

  }

  {% comment %} For one {% endcomment %}
  .b-charms_list .b-charms_list--item:nth-child(1),
  .b-charms_list.m-1 .b-charms_list--item:nth-child(1) {
    transform: translateY(0) translateX(-50%) rotate(0);
    left: 50%;
  }

     {% comment %} For two {% endcomment %}
  .b-charms_list.m-2 .b-charms_list--item:nth-child(1) {
    transform: translateY(-2px) translateX(-90%) rotate(1deg);
    left: 50%;
  }

  .b-charms_list.m-2 .b-charms_list--item:nth-child(2) {
    transform: translateY(-2px) translateX(-30%) rotate(-1deg);
    left: 50%;
  }

 {% comment %} For Three {% endcomment %}
  .b-charms_list.m-3 .b-charms_list--item:nth-child(1) {
    transform: translateY(-8px) translateX(-120%) rotate(6deg);
    left: 50%;
  }

  .b-charms_list.m-3 .b-charms_list--item:nth-child(2) {
    transform: translateY(-2px) translateX(-50%) rotate(0);
    left: 50%;
  }

  .b-charms_list.m-3 .b-charms_list--item:nth-child(3) {
    transform: translateY(-8px) translateX(10%) rotate(-6deg);
    left: 50%;
  }

  {% comment %} For Fourth {% endcomment %}
  .b-charms_list.m-4 .b-charms_list--item:nth-child(1) {
    transform: translateY(-8px) translateX(-150%) rotate(6deg);
    left: 50%;
  }

  .b-charms_list.m-4 .b-charms_list--item:nth-child(2) {
    transform: translateY(-2px) translateX(-80%) rotate(2deg);
    left: 50%;
  }

  .b-charms_list.m-4 .b-charms_list--item:nth-child(3) {
    transform: translateY(-2px) translateX(0) rotate(-2deg);
    left: 50%;
  }

  .b-charms_list.m-4 .b-charms_list--item:nth-child(4) {
    transform: translateY(-8px) translateX(40%) rotate(-6deg);
    left: 50%;
  }

  {% comment %} @keyframes sway-right {
    0% {
      transform: translateY(0) translateX(0) rotate(0);
    }
    30% {
      transform: translateY(-4px) translateX(60%) rotate(10deg); /* Уезжаем дальше */
    }
    60% {
      transform: translateY(-2px) translateX(52%) rotate(5deg); /* Начинаем возвращаться */
    }
    100% {
      transform: translateY(-2px) rotate(5deg); /* Конечная позиция */
      right: 50%;
    }
  }
  
  /* Анимация для элементов, которые уезжают налево */
  @keyframes sway-left {
    0% {
      transform: translateY(0) translateX(0) rotate(0);
    }
    30% {
      transform: translateY(-4px) translateX(-60%) rotate(-10deg); /* Уезжаем дальше */
    }
    60% {
      transform: translateY(-2px) translateX(-52%) rotate(-5deg); /* Начинаем возвращаться */
    }
    100% {
      transform: translateY(-2px) rotate(-5deg); /* Конечная позиция */
      left: 50%;
    }
  } {% endcomment %}
  


</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const notice = document.getElementById('b-notice');
    const pendantContainer = document.getElementById('pendant-builder-container');
    const charmsList = document.querySelector('.b-charms_list');
    const maxCharms = 4;
    const checkboxes = Array.from(document.querySelectorAll('.charm-checkbox'));
    let counter = 0; // Счетчик для отслеживания заполненных слотов
  
    checkboxes.forEach((checkbox, index) => {
      const charmImageSrc = checkbox.getAttribute('data-charm').replace(/['"]+/g, ''); // Удаляем лишние кавычки
  
      checkbox.addEventListener('change', function() {
        if (this.checked) {
          if (counter < maxCharms) {
            // Создаем новый элемент div для изображения
            const newCharmItem = document.createElement('div');
            newCharmItem.classList.add('b-charms_list--item', `m-${counter + 1}`);
            setTimeout(() => {
              newCharmItem.classList.add('m-showed');
            }, 300);
            
            const newCharmImage = document.createElement('img');
            newCharmImage.setAttribute('src', charmImageSrc); // Устанавливаем src без лишних кавычек
            newCharmImage.classList.add('b-charms_list--item_img');
  
            // Добавляем изображение в новый div
            newCharmItem.appendChild(newCharmImage);
            charmsList.appendChild(newCharmItem); // Вставляем div в контейнер .b-charms_list
            counter++; // Увеличиваем счетчик после добавления элемента
            updateCharmListClass();
          }
        } else {
          // Удаляем соответствующий div при снятии чекбокса
          const charmToRemove = charmsList.querySelector(`.b-charms_list--item_img[src="${charmImageSrc}"]`);
          if (charmToRemove) {
            const parentItem = charmToRemove.closest('.b-charms_list--item');
            parentItem.classList.remove('m-showed');
            counter--; // Уменьшаем счетчик перед удалением элемента
            setTimeout(() => {
              parentItem.remove();
              updateCharmListClass();
              checkMaxCharms(); // Обновляем доступность чекбоксов после удаления элемента
            }, 300);
          }
        }
  
        // Проверка на достижение максимума после изменения количества элементов
        checkMaxCharms();
      });
    });
  
    function updateCharmListClass() {
      const selectedCharms = checkboxes.filter(checkbox => checkbox.checked).length;
      charmsList.className = 'b-charms_list'; // Сбросить классы
  
      if (selectedCharms > 0 && selectedCharms <= maxCharms) {
        charmsList.classList.add(`m-${selectedCharms}`); // Добавляем класс в зависимости от количества активных чекбоксов
      }
    }
  
    function checkMaxCharms() {
      // Если достигнут максимум, отключаем все неактивные чекбоксы
      if (counter >= maxCharms) {
        checkboxes.forEach(checkbox => {
          if (!checkbox.checked) {
            checkbox.disabled = true; // Отключаем неактивные чекбоксы
          }
          notice.classList.remove('hidden'); // Показываем уведомление
        });
      } else {
        // Если меньше максимума, убеждаемся, что чекбоксы активны
        checkboxes.forEach(checkbox => checkbox.disabled = false);
        notice.classList.add('hidden'); // Показываем уведомление
      }
    }
  });
</script>

{% schema %}
{
  "name": "Pendant Builder 2",
  "settings": [
    {
      "type": "image_picker",
      "id": "pendant_image",
      "label": "Pendant Image",
      "info": "Upload the base pendant image."
    }
  ],
  "blocks": [
    {
      "type": "charm",
      "name": "Charm",
      "settings": [
        {
          "type": "image_picker",
          "id": "charm_image",
          "label": "Charm Image"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Pendant Builder 2",
      "category": "Custom"
    }
  ]
}
{% endschema %}
